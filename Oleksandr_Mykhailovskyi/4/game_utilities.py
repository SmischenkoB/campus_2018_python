import random

import map_generator
from map_generator import map_elements
from map_generator import map_cells_repr
from map_generator import player_repr
from map_generator import fog_repr
from map_generator import unknown_repr

position = [-1, -1]
view_depth = [1, 1]

actions_list = ["up", "left", "down", "right"]

action_dict = {
    actions_list[0]: "w",
    actions_list[1]: "a",
    actions_list[2]: "s",
    actions_list[3]: "d"
}


def format_cell(mstr, cell_index):
    """
    Gets str reprs regarding player pos.

    Args:
        mstr (str): str repr of cell.
        cell_index ([int, int]): cell index
    Returns:
        str - repr of cell regarding player pos.
    """
    mrepr = ""
    if cell_index[0] == position[0] and cell_index[1] == position[1]:
        mrepr = player_repr
    elif cell_index[0] > position[0] + view_depth[0] or cell_index[1] > position[1] + view_depth[1]:
        mrepr = fog_repr
    elif cell_index[0] < position[0] - view_depth[0] or cell_index[1] < position[1] - view_depth[1]:
        mrepr = fog_repr
    elif mstr == map_elements[1][1] or mstr == map_elements[2][1]:
        mrepr = unknown_repr
    else:
        mrepr = mstr
    return mrepr


def format_output(game_map):
    """
    Shows map.

    Args:
        game_map ([[str...]...]): game map.
    """

    print(position)

    printed = str()
    for index_i, i in enumerate(game_map):
        for index_j, j in enumerate(i):
            printed += format_cell(j, [index_i, index_j])
        printed += "\n"
    print(printed)


def get_action():
    """
    Returns:
        str - Action mapped on input.
        If no action / no such action - None
    """

    input_action = input("Your turn\n")
    for key in action_dict.keys():
        if input_action == action_dict[key]:
            return key
    return None


def check_position(position, game_map):
    """
    Checks whether position is acceptable.

    Args:
        position ((int,int)): position to check.
        game_map ([[str...]...]): game map generated by game_generator module.
    Returns:
        True if acceptable.
        False otherwise.
    """
    size = len(game_map)
    if position[0] >= size or position[1] >= size:
        return False
    elif position[0] < 0 or position[1] < 0:
        return False
    return True


def move_player(action, position, game_map):
    """
    Moves player on the map.

    Args:
        action (str): action from action dict.
        position ((int,int)): position to check.
        game_map ([[str...]...]): game map generated by game_generator module.
    Returns:
        [int, int] - list, new position.
    """
    oldPosition = list(position)
    if action == actions_list[0]:
        # Move up
        position[1] += 1
    elif action == actions_list[1]:
        # Move left
        position[0] -= 1
    elif action == actions_list[2]:
        # Move down
        position[1] -= 1
    elif action == actions_list[3]:
        # Move right
        position[0] += 1

    if not check_position(position, game_map):
        return oldPosition
    return position


def generate_random_position(game_map):
    """
    Args:
        game_map ([[str...]...]): game map generated by game_generator module.
    Returns:
        [int, int] - list, new position.
    """
    size = len(game_map)
    pos = [random.randint(0, size - 1), random.randint(0, size - 1)]
    return pos


def game_setup():
    """
    Gets all things ready to start the game.

    Returns:
        game_map ([[str...]...]): game map generated by game_generator module.
    """
    game_map = map_generator.generate_random_map(True)
    global position
    position = generate_random_position(game_map)
    return game_map


def get_warning(position, game_map):
    """
    Get str warning - if anything in range 1 of it
    can lead to defeat/win.

    Args:
        position ((int,int)): position to check.
        game_map ([[str...]...]): game map generated by game_generator module.
    Returns:
        str - warning if something is present in player's view.
        str - empty otherwise.
    """
    print(position)
    mwarning = ""
    if game_map[position[0]][position[1] + view_depth[1]] == map_cells_repr[1] or \
        game_map[position[0]][position[1] - view_depth[1]] == map_cells_repr[1] or \
        game_map[position[0] + view_depth[0]][position[1]] == map_cells_repr[1] or \
            game_map[position[0] - view_depth[0]][position[1]] == map_cells_repr[1]:

        mwarning = "Achtung, you just might win!\n"

    if game_map[position[0]][position[1] + view_depth[1]] == map_cells_repr[2] or \
        game_map[position[0]][position[1] - view_depth[1]] == map_cells_repr[2] or \
        game_map[position[0] + view_depth[0]][position[1]] == map_cells_repr[2] or \
            game_map[position[0] - view_depth[0]][position[1]] == map_cells_repr[2]:
        mwarning += "Achtung, you can loose!\n"

    return mwarning


def game_step(game_map):
    """
    Main game step.

    Args:
        game_map ([[str...]...]): game map generated by game_generator module.
    Returns:
        False when game is over.
        True otherwise.
    """
    global position

    format_output(game_map)
    print(get_warning(position, game_map))

    action = get_action()
    if action is None:
        return True

    position = move_player(action, position, game_map)

    return True
